---
bibliography: [references.bib]
---

# Marco conceptual {#sec-Chapter2}

El objetivo principal de este capítulo es presentar los conceptos básicos que se utilizarán a lo largo de este trabajo en especifico la sección de antecedentes y metodología. En primer lugar, se presentará un breve resumen de como crear un paquete en R, los componentes mínimos para su publicación en CRAN (repositorio donde se encuentran disponibles versiones estables de diferentes paquetes de R), y las herramientas que se pueden utilizar para su desarrollo. Luego, se presentarán los conceptos básicos de la programación funcional y orientada a objetos en R para luego enfocarnos en la meta-programación. Finalmente, se presentara un marco básico de inferencia en poblaciones finitas y encuestas por muestreo para luego presentar diferentes métodos de estimación de parámetros poblacionales y sus respectivos errores estándar.

## Desarrollo de paquetes en R

R al ser un lenguaje de código abierto y además cuenta con una gran comunidad de usuarios, en diferentes áreas de investigación, ha permitido que se desarrollen una gran cantidad de paquetes que permiten realizar diferentes tareas de análisis de datos, visualización, modelado, entre otros. En este sentido, el desarrollo de paquetes en R es una tarea que se ha vuelto muy común entre los usuarios de R, ya que permite compartir código, documentación y datos de manera sencilla.

Para casí cualquier disciplina científica o en la industria se puede encontrar una comunidad de usuarios que desarollan paquetes en R, en este sentido, el desarrollo de paquetes en R es una tarea que se ha vuelto muy común entre los usuarios de R y es muy sencillo de realizar. A continuación, se presentan los conceptos básicos para el desarrollo de paquetes en R.

### ¿Por qué desarrollar un paquete en R?

Desarrollar un paquete en R tiene varias ventajas, entre las cuales se pueden mencionar las siguientes:

-   **Reutilización de código**: Es importante tener en cuenta que existe una comunidad que hace cosas similares a las que uno hace, por lo que es posible que alguien ya haya escrito una función que uno necesita. Por lo tanto, siempre es buena buscar si existe algun paquete que ya tenga las funcionalidades que se requieren.
-   **Compartir código**: La comunidad de R es muy activa y siempre está dispuesta a compartir código, por esta razón es que se mantienen en constante desarrollo de paquetes.
-   **Colaboración**: El trabajo colaborativo es esencial en el desarrollo de paquetes en R, ya que permite que diferentes personas puedan aportar con nuevas funcionalidades, correcciones de errores, entre otros.

### Elementos básicos de un paquete en R

Para que nuestro conjunto de funciones, datos y documentación sea considerado un paquete en R, es necesario que cumpla con ciertos requisitos mínimos. A continuación, se presentan los componentes mínimos que debe tener un paquete en R para ser publicado en CRAN.

-   **Directorio**: Un paquete en R debe estar contenido en un directorio que contenga al menos los siguientes archivos y directorios:

    -   [`R/`](https://github.com/metaSurveyR/metasurvey/tree/main/R): Directorio que contiene los archivos con las funciones que se desean incluir en el paquete.
    -   [`man/`](https://github.com/metaSurveyR/metasurvey/tree/main/man): Directorio que contiene los archivos con la documentación de las funciones que se encuentran en el directorio `R/`. En general se utiliza *Roxygen2* [@roxygen2] para generar la documentación de las funciones.
    -   [`DESCRIPTION`](https://github.com/metaSurveyR/metasurvey/blob/main/DESCRIPTION): Archivo que contiene la descripción del paquete, incluyendo el nombre, versión, descripción, autor, entre otros.
    -   [`NAMESPACE`](https://github.com/metaSurveyR/metasurvey/blob/main/NAMESPACE): Archivo que contiene la información sobre las funciones que se exportan y las dependencias del paquete.
    -   [`LICENSE`](https://github.com/metaSurveyR/metasurvey/blob/main/LICENSE): Archivo que contiene la licencia bajo la cual se distribuye el paquete.
    -   [`README.md`](https://github.com/metaSurveyR/metasurvey/blob/main/README.md): Archivo que contiene información general sobre el paquete.

-   **Documentación**: La documentación de las funciones es un componente esencial de un paquete en R, ya que permite que los usuarios puedan entender el funcionamiento de las funciones que se encuentran en el paquete. La documentación de las funciones se realiza utilizando el sistema de documentación de R, que se basa en el uso de comentarios en el código fuente de las funciones.

-   **Pruebas**: Es importante que el paquete tenga pruebas que permitan verificar que las funciones se comportan de la manera esperada. Las pruebas se realizan utilizando el paquete *testthat* [@wickham2011] que permite realizar pruebas unitarias.

-   **Control de versiones**: Es importante que el paquete tenga un sistema de control de versiones que permita llevar un registro de los cambios que se realizan en el paquete. El sistema de control de versiones más utilizado en la comunidad de R es `git`.

-   **Licencia**: Es importante que el paquete tenga una licencia que permita a los usuarios utilizar, modificar y distribuir el paquete. La licencia más utilizada en la comunidad de R es la licencia MIT.

El proceso de subir un paquete a CRAN es un proceso que puede ser tedioso, ya que se deben cumplir con ciertos requisitos que son revisados por los mantenedores de CRAN, no es trivial y puede tomar tiempo, sin embargo, es un proceso que vale la pena ya que permite que el paquete sea utilizado por una gran cantidad de usuarios.

El proceso de chequeo fue automatizado con github actions, por lo que cada vez que se realiza un cambio en el repositorio, se ejecutan los chequeos de CRAN y se notifica si el paquete cumple con los requisitos para ser publicado en caso de que no cumpla con los requisitos se notifica el error y no puede ser incluido en la rama principal del repositorio hasta que se corrija el error.

Todo el proceso y código fuente del paquete se encuentra disponible en el [repositorio de github del paquete](https://github.com/metaSurveyR/metasurvey). En el caso que este interesado en colaborar con el desarrollo del paquete puede consultar la [guía de contribución](www.google.com)

## Paradigmas de programación en R

R es un lenguaje de programación que permite realizar programación funcional y orientada a objetos, lo que permite que los usuarios puedan utilizar diferentes paradigmas de programación para resolver problemas. A continuación, se presentan los conceptos básicos de la programación funcional y orientada a objetos en R.

### Programación funcional

La programación funcional es un paradigma de programación que se basa en el uso de funciones para resolver problemas. En R, las funciones son objetos de primera clase, lo que significa que se pueden utilizar como argumentos de otras funciones, se pueden asignar a variables, entre otros [@wickham2019 204-281]. A continuación, se presentan los conceptos básicos de la programación funcional en R.

-   **Funciones de orden superior**: En R, las funciones de orden superior son funciones que toman como argumento una o más funciones y/o retornan una función. Un ejemplo de una función de orden superior en R es la función `lapply` que toma como argumento una lista y una función y retorna una lista con los resultados de aplicar la función a cada elemento de la lista.

-   **Funciones anónimas**: En R, las funciones anónimas son funciones que no tienen nombre y se crean utilizando la función `function`. Un ejemplo de una función anónima en R es la función `function(x) x^2` que toma como argumento `x` y retorna `x^2`.

-   **Funciones puras**: En R, las funciones puras son funciones que no tienen efectos secundarios y retornan el mismo resultado para los mismos argumentos. Un ejemplo de una función pura en R es la función `sqrt` que toma como argumento un número y retorna la raíz cuadrada de ese número.

Este paradigma de programación es muy útil para realizar análisis de datos, ya que permite que los usuarios puedan utilizar funciones para realizar operaciones sobre los datos de manera sencilla y eficiente, dentro de metaSurvey no existe una presencia fuerte de programación funcional, sin embargo, se utilizan algunas funciones de orden superior para realizar operaciones sobre los datos.

### Programación orientada a objetos

La programación orientada a objetos es un paradigma de programación que se basa en el uso de objetos para resolver problemas. En R, los objetos son instancias de clases que tienen atributos y métodos [@wickham2019 285-370; @mailund2017]. A continuación, se presentan los conceptos básicos de la programación orientada a objetos en R.

-   **Clases y objetos**: En R, las clases son plantillas que definen la estructura y el comportamiento de los objetos y los objetos son instancias de clases. En R, las clases se definen utilizando la función `setClass` y los objetos se crean utilizando la función `new`.

-   **Atributos y métodos**: En R, los atributos son variables que almacenan información sobre el estado de un objeto y los métodos son funciones que permiten modificar el estado de un objeto. En R, los atributos se definen utilizando la función `setClass` y los métodos se definen utilizando la función `setMethod`.

Dentro de metaSurvey se utiliza la programación orientada a objetos para definir las clases de los objetos que se utilizan para representar los datos de las encuestas mediante una creación de una clase especifica llamada [`Survey`](https://github.com/metaSurveyR/metasurvey/blob/main/R/survey.R) que permite además de almacenar los datos de la encuesta añadir atributos y métodos que permiten realizar operaciones sobre los datos de manera sencilla y eficiente.

De forma similar se modelan las clases [`Step`](https://github.com/metaSurveyR/metasurvey/blob/main/R/step.R), [`Recipe`](https://github.com/metaSurveyR/metasurvey/blob/main/R/recipe.R) y [`Workflow`](https://github.com/metaSurveyR/metasurvey/blob/main/R/survey.R) elementos cruciales en el ecosistema de metaSurvey donde se definen los pasos de preprocesamiento, recetas de preprocesamiento y flujos de trabajo respectivamente. En este caso particular se utiliza el paquete *R6* [@chang2022] que permite definir clases de manera sencilla y eficiente además de permitir la herencia de clases y la definición de métodos y atributos de manera sencilla.

### Meta-programación

La meta-programación es un paradigma de programación que se basa en el uso de código para manipular código [@wickham2019 373-500; @thomasmailund2017] . En R, la meta-programación se realiza utilizando el sistema de metaprogramación de R que se basa en el uso de expresiones, llamadas y funciones. A continuación, se presentan los conceptos básicos de la meta-programación en R.

-   **Expresiones**: En R, las expresiones son objetos que representan código y se crean utilizando la función `quote`. Un ejemplo de una expresión en R es la expresión `quote(x + y)` que representa el código `x + y`.

-   **Llamadas**: En R, las llamadas son objetos que representan la aplicación de una función a sus argumentos y se crean utilizando la función `call`. Un ejemplo de una llamada en R es la llamada `call("sum", 1, 2, 3)` que representa la aplicación de la función `sum` a los argumentos `1`, `2` y `3`.

-   **Funciones**: En R, las funciones son objetos que representan código y se crean utilizando la función `function`. Un ejemplo de una función en R es la función `function(x, y) x + y` que representa el código `x + y`.

## Inferencia en muestreo de poblaciones finitas

El objetivo de esta sección es brindar un contexto básico sobre encuestas por muestreo, para luego presentar diferentes métodos de estimación de parámetros poblacionales como la estimación de totales, medias, proporciones y sus respectivos errores estándar.

El elemento crucial en la Inferencia en muestreo de poblaciones finitas es que se asume que la población es finita y la aleatoriedad proviene de la selección de la muestra, por lo que es necesario considerar la probabilidad de selección de cada muestra posible. Es común escuchar el término *diseño* en el contexto de encuestas por muestreo, el diseño de muestreo es el mecanismo que se utiliza para seleccionar la muestra, existen diferentes tipos de diseños que se utilizan en la práctica, sin embargo nos enfocaremos en el proceso de construcción de ponderadores los cuales son fundamentales para realizar inferencia. 

Supongamos que estamos interesados en estimar el total de una variable de interés $y$ en una población finita, es decir, el total poblacional $T_y = \sum_{i=1}^{N} y_i$, donde $y_i$ es el valor de la variable de interés para el individuo $i$ de la población y $N$ es el tamaño de la población. Si se selecciona una muestra de $n$ elementos de la población, es posible estimar el total poblacional utilizando la siguiente fórmula:

$$
\hat{T}_y = \sum_{i=1}^{n} y_i
$$


Donde $\hat{T}_y$ es el estimador del total poblacional, $y_i$ es el valor de la variable de interés para el individuo $i$ de la muestra y $n$ es el tamaño de la muestra. Es importante tener en cuenta que el estimador del total poblacional depende del mecanismo de muestreo que se utilice, para esto debemos de mencionar la siguiente variable aleatoria:

Asumiendo un diseño concreto es decir, fijada $p(s)$ podemos definir la variable (aleatoria) de pertenencia a la muestra $s$ como:

$$
I_{k} = \begin{cases} 1 & \text{si el individuo } k \text{ pertenece a la muestra } s \\ 0 & \text{en otro caso} \end{cases}
$$


De esta forma es posible calcular la probabilidad de que el indivudo $k$ sea incluido en la muestra $s$, es decir $\pi_k = E(I_k) = P(I_k = 1)$ ya que es una variable aleatoria del tipo Bernoulli con probabilidad de éxito $\pi_k$. Por lo que es estimar calcular total poblacional de la siguiente forma:

$$
\hat{T}_y = \sum_{k=1}^{n} y_k = \sum_{k = 1}^{n}{y_{i} \times I_{k}} = \sum_{k = 1}^{N}{}
$$

Este ultimo paso nos permite realizar el 


Es decir, si consideramos una población de $N$ elementos (donde $N$ es finito y puede ser desconocido) y se selecciona una muestra $s$ de $n$ elementos. Cada individuo de la pobación tiene una probabilidad de ser seleccionado en la muestra, dependiendo el mecanismo de muestreo que se utilice. Cada muestra de $n$ elementos tiene una probabilidad de ser seleccionada la que denominaremos función de diseño $p(s)$, por lo que es posible asignar una probabilidad de selección a cada individuo de la población, es decir contar aquellas veces que un individuo fue seleccionado en todas las posibles muestras de $n$ elementos, esto se conoce como **probabilidad de inclusión de primer órden**.

Existen diseños sencillos donde es facil obtener la probabilidad de selección de cada individuo de la población, como el muestreo aleatorio simple (*SI*), muestreo sistemático (*SY*), muestreo estratificado, muestreo por conglomerados, entre otros. La utilización de uno u otro depende de la variable objetivo o grupo de variables que se desea estimar, aunque en la práctica se utilizan diseños complejos que combinan varios de estos diseños en varias etapas de selección. 

Un ejemplo de este tipo de diseño puede ser la ECH donde se utiliza un muestreo aleatorio en dos etapas, donde en la primera etapa se seleccionan las unidades primarias de muestreo (UPM) correspondientes a conglomerados de manzanas (zonas censales). En la segunda etapa se seleccionan las unidades secundarias de muestreo (USM) correspondientes a viviendas dentro de las manzanas seleccionadas. Luego, se identifican los hogares seleccionados y los individuos que los componen son seleccionados en su totalidad para ser encuestados [@metodolog].


### Ejemplo Diseño Simple con remplazo

Considerando una población de $N$ elementos existen $\binom{N}{n}$ maneras de seleccionar una muestra de $n$ elementos, por lo que la probabilidad de seleccionar una muestra $s$ de $n$ elementos es:

$$
P(S = s) = p(s) = 1 / \binom{N}{n}
$$

Una vez definida la función de diseño, es posible definir las probabilidades de inclusión de primer órden, es decir la probabilidad de que un individuo de la población sea seleccionado en la muestra, esta probabilidad se denota como $\pi_i$ y se define como para el caso SI.

Si miramos a un individuo de la población, este puede ser seleccionado en la muestra si y solo si se encuentra en la muestra $s$, por lo que debemos de contar cuantas formas diferentes podemos seleccionar $n-1$ elementos de los $N-1$ restantes, por lo que la probabilidad de inclusión de primer órden es, es decir $\binom{N-1}{n-1}$, por lo que la probabilidad de inclusión de primer órden es:

$$
\pi_i = \frac{\binom{N-1}{n-1}}{\binom{N}{n}} = \frac{n}{N}
$$

Una vez definida la probabilidad de inclusión de primer órden   